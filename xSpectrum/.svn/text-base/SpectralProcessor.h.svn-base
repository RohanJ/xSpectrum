//
//  SpectralProcessor.cpp
//  xSpectrum2
//
//  Created by Rohan Jyoti on 11/14/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#ifndef _SpectralProcesor_H_
#define _SpectralProcesor_H_
 
#if !defined(__COREAUDIO_USE_FLAT_INCLUDES__)
#include <CoreAudio/CoreAudioTypes.h>
#include <CoreFoundation/CoreFoundation.h>
#else
#include <CoreAudioTypes.h>
#include <CoreFoundation.h>
#endif

#include <Accelerate/Accelerate.h>

#include "CAAutoDisposer.h"

struct SpectralBufferList
{
	UInt32 mNumberSpectra;
	DSPSplitComplex mDSPSplitComplex[1];
};

class SpectralProcessor 
{
public:
	SpectralProcessor(UInt32 inFFTSize, UInt32 inHopSize, UInt32 inNumChannels, UInt32 inMaxFrames); //Default Constructor
	virtual ~SpectralProcessor(); //virtual destructor
	void Reset();
	
	//Actual Processing
	void Process(UInt32 inNumFrames, AudioBufferList* inInput, AudioBufferList* outOutput);
	typedef void (*SpectralFunction)(SpectralBufferList* inSpectra, void* inUserData);
	void SetSpectralFunction(SpectralFunction inFunction, void* inUserData);
	
	UInt32 FFTSize() const { return mFFTSize; }
	UInt32 MaxFrames() const { return mMaxFrames; }
	UInt32 NumChannels() const { return mNumChannels; }
	UInt32 HopSize() const { return mHopSize; }
	Float32* Window() const { return mWindow; }
	
	//Windowing
	void HanningWindow(); // set up a hanning window
	void SineWindow();
	
	void GetFrequencies(Float32* freqs, Float32 sampleRate); // only for processed forward
	void GetMagnitude(AudioBufferList* inCopy, Float32* min, Float32* max); // only for processed forward
	
	virtual bool ProcessForwards(UInt32 inNumFrames, AudioBufferList* inInput);
	bool ProcessBackwards(UInt32 inNumFrames, AudioBufferList* outOutput);

	//For Diagnostic Purposes
	void PrintSpectralBufferList();
	
protected:
	void CopyInput(UInt32 inNumFrames, AudioBufferList* inInput);
	void CopyInputToFFT();
	void DoWindowing();
	void DoFwdFFT();
	void DoInvFFT();
	void OverlapAddOutput();
	void CopyOutput(UInt32 inNumFrames, AudioBufferList* inOutput);
	void ProcessSpectrum(UInt32 inFFTSize, SpectralBufferList* inSpectra);
	
	UInt32 mFFTSize;
	UInt32 mHopSize;
	UInt32 mNumChannels;
	UInt32 mMaxFrames;

	UInt32 mLog2FFTSize;
	UInt32 mFFTMask; 
	UInt32 mFFTByteSize;
	UInt32 mIOBufSize;
	UInt32 mIOMask;
	UInt32 mInputSize;
	UInt32 mInputPos;
	UInt32 mOutputPos;
	UInt32 mInFFTPos;
	UInt32 mOutFFTPos;
	FFTSetup mFFTSetup;

	CAAutoFree<Float32> mWindow;
	struct SpectralChannel 
	{
		CAAutoFree<Float32> mInputBuf;		// log2ceil(FFT size + max frames)
		CAAutoFree<Float32> mOutputBuf;		// log2ceil(FFT size + max frames)
		CAAutoFree<Float32> mFFTBuf;		// FFT size
		CAAutoFree<Float32> mSplitFFTBuf;	// FFT size
	};
	CAAutoArrayDelete<SpectralChannel> mChannels;

	CAAutoFree<SpectralBufferList> mSpectralBufferList;
	
	SpectralFunction mSpectralFunction;
	void *mUserData;
	
};


#endif
